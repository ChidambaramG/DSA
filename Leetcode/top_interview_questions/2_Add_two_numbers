#You are given two non-empty linked lists representing two non-negative integers. 
# The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.
#You may assume the two numbers do not contain any leading zero, except the number 0 itself.

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        carryover = 0
        sum = None
        head = None

        if (l1.next == None and l2.next == None):
            temp_sum = l1.val + l2.val + carryover
            carryover = temp_sum // 10
            temp_sum = temp_sum % 10
            node = ListNode(temp_sum)
            if carryover == 0:
                return node
            else:
                temp_node = ListNode(carryover)
                node.next = temp_node
                return node
                
        while(l1 != None and l2 != None):
            temp_sum = l1.val + l2.val + carryover
            carryover = temp_sum // 10
            temp_sum = temp_sum % 10
            node = ListNode(temp_sum)
            if head == None:
                head = node
                sum = node
            else:
                sum.next = node
                sum = sum.next
            l1 = l1.next
            l2 = l2.next
        
        if(l1 == None):
            while(l2 != None):
                temp_sum = l2.val + carryover
                carryover = temp_sum // 10
                temp_sum = temp_sum % 10
                node = ListNode(temp_sum)
                sum.next = node
                sum = sum.next
                l2 = l2.next
        else:
            while(l1 != None):
                temp_sum = l1.val + carryover
                carryover = temp_sum // 10
                temp_sum = temp_sum % 10
                node = ListNode(temp_sum)
                sum.next = node
                sum = sum.next
                l1 = l1.next

        if carryover != 0:
            node = ListNode(carryover)
            sum.next = node

        return head